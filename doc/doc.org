
* 基本構成
** ファイル構成
.
├── api
│   ├── Bank
│   │   └── Users.php //DatabaseやFile操作(対象と1対1対応)
│   ├── Class //基幹ファイル郡
│   │   ├── ApiManager.php
│   │   ├── Bootstrap.php
│   │   ├── DataManager.php
│   │   └── ModuleManager.php
│   │
│   ├── Module //ロジックとか
│   │   ├── Fuga.php
│   │   └── Hoge
│   │       └── Hoge.php
│   ├── etc
│   │   └── db.ini.php //Databaseの設定ファイル
│   └── top.php
│         // apiのエントリポイントとか
│
│//以下はページと対応
├── common
│   ├── foot.html
│   └── head.html
├── css
│   ├── bootstrap-theme.min.css
│   └── bootstrap.min.css
├── doc
│   └── dbs.org
├── fonts
├── js
│   └── vender
│       ├── bootstrap.min.js
│       ├── jquery-1.10.2.min.js
│       └── jsrender.min.js
└── top.html

** 基本方針
・apiのエントリポイントでは基本的にModule以下のファイルを読み出すだけで、
　　jsとのやり取りや、Exceptionなどの管理を行う
・Module/以下にロジックを記述したファイルを置く．
　　そしてメソッドはエントリポイント,他のModuleから利用できるように
・Bank以下にデータベースのテーブルに対応するファイルを置く、
　　データソースには基本的にこいつだけが触れるようにする
　　また、Moduleと違いここではデータの読み書き程度の処理に抑える
　　ファイルとDBへのアクセスも隠蔽できるようになったらいいな

** 命名規則
apiのエントリポイントにて、
-------------
require_once 'Class/Bootstrap.php'
$hoge = ApiManager::getInstance();
-------------
することで、ModuleやBank以下のファイルを扱えるようになる
エントリポイントには特に命名規則はない

ロジック等を記述するファイルはModule/以下に配置する．
クラス名は Mar_Module_~ として、ModuleManagerを継承する
-------------
class Mar_Module_Hoge_Fuga extends ModuleManager
-------------
Mar_Module以下はModule/以下のファイルパスと同じにする
上の例では、Module/Hoge/Fuga.phpということになる

データベースに直接アクセスできるのはBank/以下のファイルだけであり、
クラス名は Mar_Bank_~ として、DataManagerを継承する
-------------
class Mar_Bank_Users extends ModuleManager
-------------
Mar_Bank以下の命名規則はModuleと同様．




* サイクル
登録/編集
 ↓
集計
　↓
html生成

集計とhtml生成はapiの機能とは無関係

htmlを生成するために集計するというスタンスで。
登録/編集
   ↓
新しいHTML生成
   ↓
　　 ⇔　成績集計
　　↓
生成完了


* htmlの生成
** topページ用のtable
*** 最新50件対局結果
*** 各ユーザの対局結果(累計点数、平均順位)
*** 役満履歴

** 対局結果すべてのtable
*** 全ての対局結果
*** 各ユーザの対局結果
*** 役満履歴

** 各ユーザ毎の詳細なデータtable
*** 順位率
*** 対人履歴
*** 月毎の成績とか

** その他ランキング
*** tableとは限らないが、月間順位や成績を出したりいろんなデータ出してみたい

* table生成の共通機能
** <table>のひな形に要素(table,thead,tbodyへの装飾、thead,tbodyの中身)を埋め込んでtableを生成する
** arrayから装飾を文字列に変換する
** <th>のひな形に要素を埋め込んでタイトル業を生成する。
** <tr><td></td></tr>tbodyの各行を生成する
*** 各装飾と、thead,tbodyの中身は個別に生成してもらう
*** TODO 現在だと一番上がタイトル行のtableにしか対応していない。横向きとかにも対応したい

* File系の構成をどうするか
** 現状
├── File
│   ├── Manager.php
│   └── Write
│       ├── Game
│       │   ├── Table.php
│       │   └── Result
│       └─
** 使い方から考察
apiによる登録などを実行後に、File_Managerに描画を依頼
各ページごとに、File_Write_Hogeを呼び出してHtmlを取得
File_Managerがファイルに書きだす

** Game用だけど
*** fstu → 1位　→ fstp の変換とか（game_info限定だけど）

* 2013/09/14
データソースはMySQLじゃないほうがいい。
** データアクセサの実装をする
   データアクセサインスタンス生成
　　　→　アクセス先の種類に応じて異なるインスタンスを返す
　　　　→　MySQLならPDOを継承したインスタンスを
　　　　→　ファイルならまたちがったインスタンスを
　　　　→　これら各インスタンスはデータアクセサを利用する側からは共通のインターフェースを提供する
　　　　　→　1ソース(table)につき、１クラス
　　　　　→　ユーザとしてはソースに対応したクラスのみを実装してもらう。
　　　　　　　→　実際のアクセスは継承元のクラスで実装する
　　　　　→　Moduleからは複数のデータアクセスクラスの呼び出しができるように
　　　　→　設定ファイルも分ける（ファイル書き込み用の設定ファイルを）

